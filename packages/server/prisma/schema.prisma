generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String             @id @default(uuid())
  name             String
  contact_email    String?            @unique
  phone_number     String?            @unique
  users            User[]
  skillCategories  SkillCategory[]
  roles            Role[]
  locations        Location[]
  skills           Skill[]
  trainingSessions Training[]
  SkillAuditLog    SkillAuditLog[]
  EvidenceType     EvidenceType[]
  GeneralEvidence  GeneralEvidence[]
  TrainingEvidence TrainingEvidence[]
}

model User {
  id                 Int               @id @default(autoincrement())
  password           String
  org_id             String
  firstName          String
  lastName           String
  emailAddress       String            @unique
  roleId             Int?        
  locationId         Int?
  securityGroup      SecurityGroup
  organization       Organization      @relation(fields: [org_id], references: [id])
  role               Role?             @relation(fields: [roleId], references: [id])
  location           Location?         @relation(fields: [locationId], references: [id])
  userSkills         UserSkill[]
  userAuditLogs      SkillAuditLog[]   @relation("User")
  approversAuditLogs SkillAuditLog[]   @relation("Approver")
}

model SkillCategory {
  id           Int               @id @default(autoincrement())
  org_id       String
  name         String
  description  String?
  organization Organization     @relation(fields: [org_id], references: [id])
  skills       Skill[]
}

model Skill {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  org_id            String
  skill_category_id Int
  organization      Organization      @relation(fields: [org_id], references: [id])
  category          SkillCategory     @relation(fields: [skill_category_id], references: [id])
  userSkills        UserSkill[]
  roleSkillTargets  RoleSkillTarget[]
  trainingSessions  Training[]
  SkillAuditLog     SkillAuditLog[]
}

model Role {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  org_id           String
  parent_id        Int?
  organization     Organization      @relation(fields: [org_id], references: [id])
  parentRole       Role?             @relation("ParentRole", fields: [parent_id], references: [id])
  childRoles       Role[]            @relation("ParentRole")
  users            User[]
  roleSkillTargets RoleSkillTarget[]
}

model RoleSkillTarget {
  id       Int @id @default(autoincrement())
  role_id  Int
  skill_id Int
  target   Int
  role     Role   @relation(fields: [role_id], references: [id])
  skill    Skill  @relation(fields: [skill_id], references: [id])
}

model Location {
  id           Int               @id @default(autoincrement())
  org_id       String
  name         String
  description  String?
  latitude     Float
  longitude    Float
  organization Organization     @relation(fields: [org_id], references: [id])
  users        User[]
}

model UserSkill {
  id           Int @id @default(autoincrement())
  userId       Int
  skillId      Int
  rating       Int    @default(0)
  proficiency  Int    @default(0)
  interest     Int    @default(0)
  user         User   @relation(fields: [userId], references: [id])
  skill        Skill  @relation(fields: [skillId], references: [id])
}

model Training {
  id              Int               @id @default(autoincrement())
  org_id          String
  name            String
  target          String
  skillId         Int
  duration        String
  description     String?
  url             String?
  instructor      String?
  startDate       DateTime?
  endDate         DateTime?
  organization    Organization      @relation(fields: [org_id], references: [id])
  skill           Skill             @relation(fields: [skillId], references: [id])
  TrainingEvidence TrainingEvidence[]
}

model SkillAuditLog {
  id              Int               @id @default(autoincrement())
  org_id          String
  evidenceId      Int?
  skill_id        Int
  user_id         Int
  approver_id     Int
  timestamp       DateTime
  feedback        String?
  rating          Int?
  organization    Organization      @relation(fields: [org_id], references: [id])
  skill           Skill             @relation(fields: [skill_id], references: [id])
  user            User              @relation("User", fields: [user_id], references: [id])
  approver        User              @relation("Approver", fields: [approver_id], references: [id])
  GeneralEvidence GeneralEvidence[]
  TrainingEvidence TrainingEvidence[]
}

model EvidenceType {
  id              Int               @id @default(autoincrement())
  org_id          String
  name            String
  description     String?
  organization    Organization      @relation(fields: [org_id], references: [id])
  GeneralEvidence GeneralEvidence[]
  TrainingEvidence TrainingEvidence[]
}

model GeneralEvidence {
  id                   Int               @id @default(autoincrement())
  auditId              Int
  typeId               Int
  evidenceId           Int?              @unique
  org_id               String
  project_title        String?
  roles                String?
  responsibilities     String?
  duration             String?
  technologies_used    String?
  results              String?
  proficiency          Int?
  certification_name   String?
  issuing_organization String?
  date_obtained        DateTime?
  certification_url    String?
  assessment_name      String?
  date_taken           DateTime?
  score_grade          String?
  comments             String?
  skillAuditLog        SkillAuditLog    @relation(fields: [auditId], references: [id])
  evidenceType         EvidenceType     @relation(fields: [typeId], references: [id])
  organization         Organization     @relation(fields: [org_id], references: [id])
}

model TrainingEvidence {
  id                Int               @id @default(autoincrement())
  auditId           Int
  evidenceId        Int
  trainingId        Int
  certification_url String?
  comments          String?
  org_id            String
  skillAuditLog     SkillAuditLog    @relation(fields: [auditId], references: [id])
  evidenceType      EvidenceType     @relation(fields: [evidenceId], references: [id])
  training          Training         @relation(fields: [trainingId], references: [id])
  organization      Organization     @relation(fields: [org_id], references: [id])
}

enum SecurityGroup {
  Admin
  Supervisor
  User
}
